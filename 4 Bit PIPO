*Verilog Code*:-

module pipo_4bit (
    input clk,
    input reset,
    input load,
    input [3:0] data_in,
    output reg [3:0] data_out
);

    always @(posedge clk or posedge reset) begin
        if (reset) 
            data_out <= 4'b0000; // Reset output to 0000
        else if (load)
            data_out <= data_in; // Load data when load is high
    end

endmodule

*Testbench code*:-
module pipo_4bit_tb;

    reg clk;
    reg reset;
    reg load;
    reg [3:0] data_in;
    wire [3:0] data_out;

    // Instantiate the PIPO
    pipo_4bit uut (
        .clk(clk),
        .reset(reset),
        .load(load),
        .data_in(data_in),
        .data_out(data_out)
    );

    // Clock generation
    initial begin
        clk = 0;
        forever #5 clk = ~clk; // Toggle clock every 5 time units
    end

    // Test sequence
    initial begin
        $display("Time\tReset\tLoad\tData_in\tData_out");
        $monitor("%g\t%b\t%b\t%b\t%b", $time, reset, load, data_in, data_out);

        // Test initial reset
        reset = 1; load = 0; data_in = 4'b0000;
        #10 reset = 0;

        // Load data 1010
        load = 1; data_in = 4'b1010;
        #10 load = 0;

        // Load data 1101
        #10 load = 1; data_in = 4'b1101;
        #10 load = 0;

        // Apply reset again
        #10 reset = 1;
        #10 reset = 0;

        // Load data 0111
        #10 load = 1; data_in = 4'b0111;
        #10 load = 0;

        #20 $stop;
    end

endmodule
